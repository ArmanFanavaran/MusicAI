@page
@model MusicAI.Pages.Transcription.IndexModel
<h2>Transcription</h2>

<button id="startBtn" onclick="startRecording()" disabled>Start Recording</button>
<button id="stopBtn" onclick="stopRecording()" disabled>Stop Recording</button>
<div>
    <h4>Transcription Result:</h4>
    <div id="transcriptionContainer" style="overflow-y: auto; height: 350px; width: 100%;"></div>
</div>

@section Scripts {
    <script src="~/js/signalr.min.js"></script>
    <script src="~/js/vexflow-min.js"></script>
    <script src="~/js/opensheetmusicdisplay.min.js"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/transcriptionHub")
                .build();

            connection.on("ReceiveTranscription", function (musicXml) {
                console.log("ReceiveTranscription called via server");
                var tempContainer = document.createElement("div");
                var osmd = new opensheetmusicdisplay.OpenSheetMusicDisplay(tempContainer, {
                    autoResize: true,
                    backend: "svg",
                    drawTitle: false,
                });
                osmd.load(musicXml).then(function () {
                    osmd.render();
                    var transcriptionContainer = document.getElementById("transcriptionContainer");
                    transcriptionContainer.appendChild(tempContainer);

                    // Scroll to the bottom of the transcription container
                    transcriptionContainer.scrollTop = transcriptionContainer.scrollHeight;
                    // Find the SVG element by ID and set its height
                    var svgElement = tempContainer.querySelector("#osmdSvgPage1");
                    if (svgElement) {
                        console.log(svgElement)
                        svgElement.style.height = "100px";
                        svgElement.style.width = "auto";
                        svgElement.style.maxWidth = "100%";
                    }

                });

            });

            connection.start().then(() => {
                console.log("SignalR connection established.");
                document.getElementById("startBtn").disabled = false;
            }).catch(function (err) {
                console.error('SignalR connection error: ', err.toString());
            });

            let mediaStream;
            const chunkDuration = 6000; // 6 seconds
            const mediaRecorderPool = [];
            const maxRecorders = 20;
            let chunkIndex = 0;
            let isRecording = false;
            let recordInterval;
            let poolLock = false;

            async function initMediaRecorderPool() {
                mediaStream = await navigator.mediaDevices.getUserMedia({ audio: true });
                for (let i = 0; i < maxRecorders; i++) {
                    const mediaRecorder = createMediaRecorder(mediaStream);
                    mediaRecorderPool.push({ recorder: mediaRecorder, busy: false });
                }
            }

            function createMediaRecorder(stream) {
                const options = { mimeType: 'audio/webm' }; // Use a supported format
                const mediaRecorder = new MediaRecorder(stream, options);
                mediaRecorder.ondataavailable = (event) => {
                    const reader = new FileReader();
                    reader.onload = function () {
                        const base64String = this.result.split(',')[1];
                        console.log("base64 chunk " + chunkIndex + " is: " + base64String);
                        connection.invoke("SendAudioChunkBase64", base64String, "roomId", 1, 1).catch(err => console.error(err.toString()));
                    };
                    reader.readAsDataURL(event.data);
                };
                return mediaRecorder;
            }

            async function getFreeRecorder() {
                while (poolLock) {
                    await new Promise(resolve => setTimeout(resolve, 10));
                }
                poolLock = true;
                for (let i = 0; i < mediaRecorderPool.length; i++) {
                    if (!mediaRecorderPool[i].busy) {
                        mediaRecorderPool[i].busy = true;
                        poolLock = false;
                        return mediaRecorderPool[i];
                    }
                }
                poolLock = false;
                return null;
            }

            async function startRecording() {
                console.log("Start button clicked");
                const startBtn = document.getElementById("startBtn");
                const stopBtn = document.getElementById("stopBtn");
                startBtn.disabled = true;
                stopBtn.disabled = false;

                if (!mediaStream) {
                    await initMediaRecorderPool();
                }
                isRecording = true;

                startRecordingChunk();

                recordInterval = setInterval(() => {
                    if (isRecording) {
                        startRecordingChunk();
                    } else {
                        clearInterval(recordInterval);
                    }
                }, chunkDuration);
            }
            window.startRecording = startRecording;

            async function startRecordingChunk() {
                const recorderObj = await getFreeRecorder();
                if (!recorderObj) {
                    console.error("No free MediaRecorder available");
                    return;
                }

                const mediaRecorder = recorderObj.recorder;

                mediaRecorder.start();

                // Stop recording after the specified chunk duration
                setTimeout(() => {
                    if (mediaRecorder.state !== "inactive") {
                        mediaRecorder.stop();
                    }
                    recorderObj.busy = false; // Mark as free after stopping
                }, chunkDuration - 100);
            }

            function stopRecording() {
                isRecording = false;
                console.log("Stop button clicked");
                const startBtn = document.getElementById("startBtn");
                const stopBtn = document.getElementById("stopBtn");

                startBtn.disabled = false;
                stopBtn.disabled = true;

                clearInterval(recordInterval);

                mediaRecorderPool.forEach(recorderObj => {
                    if (recorderObj.recorder.state !== "inactive") {
                        recorderObj.recorder.stop();
                    }
                    recorderObj.busy = false;
                });

                // if (mediaStream) {
                //     mediaStream.getTracks().forEach(track => track.stop());
                //     mediaStream = null;
                // }
            }
            window.stopRecording = stopRecording;
        });
    </script>
    <style>
        /* Ensure other styles don't affect SVGs globally */
        #transcriptionContainer svg {
            height: 300px;
            width: auto;
            max-width: 100%;
        }
    </style>
}
